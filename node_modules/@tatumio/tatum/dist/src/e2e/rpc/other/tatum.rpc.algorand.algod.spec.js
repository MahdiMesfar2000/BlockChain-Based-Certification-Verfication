"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = __importDefault(require("process"));
const service_1 = require("../../../service");
const e2e_util_1 = require("../../e2e.util");
const getAlgorandAlgodRpc = async (testnet) => await service_1.TatumSDK.init({
    network: testnet ? service_1.Network.ALGORAND_ALGOD_TESTNET : service_1.Network.ALGORAND_ALGOD,
    apiKey: {
        v4: testnet ? process_1.default.env.V4_API_KEY_TESTNET : process_1.default.env.V4_API_KEY_MAINNET,
    },
    verbose: e2e_util_1.e2eUtil.isVerbose,
});
describe.each([false, true])('Algorand Algod', (testnet) => {
    describe(`${testnet ? 'Testnet' : 'Mainnet'}`, () => {
        let tatum;
        beforeEach(async () => {
            tatum = await getAlgorandAlgodRpc(false);
        });
        afterEach(async () => {
            await tatum.destroy();
        });
        it('should correctly get ledger supply', async () => {
            const response = await tatum.rpc.getLedgerSupply();
            expect(response).toBeDefined();
        });
        it('should correctly get block hash', async () => {
            const response = await tatum.rpc.getBlockHash({ round: 10 });
            expect(response).toBeDefined();
        });
        it('should correctly get genesis', async () => {
            const response = await tatum.rpc.getGenesis();
            expect(response).toBeDefined();
        });
        it('should correctly check if node is healthy', async () => {
            await expect(tatum.rpc.isHealthy()).resolves.not.toThrow();
        });
        it('should correctly check if node is ready', async () => {
            await expect(tatum.rpc.isReady()).resolves.not.toThrow();
        });
        // TODO: once allowed remove skip
        it.skip('should correctly get tx params', async () => {
            const response = await tatum.rpc.getTransactionParams();
            expect(response).toBeDefined();
        });
    });
});
//# sourceMappingURL=tatum.rpc.algorand.algod.spec.js.map